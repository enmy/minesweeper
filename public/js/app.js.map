{"version":3,"sources":["webpack:///./resources/js/app.js","webpack:///./resources/js/bootstrap.js","webpack:///./resources/js/visitAdjacent.js","webpack:///./resources/js/createBoard.js","webpack:///./resources/js/App.jsx","webpack:///./resources/js/initBoard.js","webpack:///./resources/js/index.js"],"names":["require","window","_","axios","defaults","headers","common","visitAdjacent","x","y","width","height","fn","createBoard","mines","Error","validateBoard","tooManyTries","doCreateBoard","error","CellWithTooManyAdjacentException","placedMines","board","Array","createEmptyBoard","xTarget","Math","floor","random","yTarget","isMine","value","App","useState","map","row","cell","state","setBoard","uncover","console","log","className","rowIndex","columnIndex","onClick","document","getElementById","ReactDOM"],"mappings":"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","file":"/js/app.js","sourcesContent":["require('./bootstrap');\nrequire('./index')\n","window._ = require('lodash')\n\n/**\n * We'll load the axios HTTP library which allows us to easily issue requests\n * to our Laravel back-end. This library automatically handles sending the\n * CSRF token as a header based on the value of the \"XSRF\" token cookie.\n */\n\nwindow.axios = require('axios')\n\nwindow.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'\n\n/**\n * Echo exposes an expressive API for subscribing to channels and listening\n * for events that are broadcast by Laravel. Echo and event broadcasting\n * allows your team to easily build robust real-time web applications.\n */\n\n// import Echo from 'laravel-echo';\n\n// window.Pusher = require('pusher-js');\n\n// window.Echo = new Echo({\n//     broadcaster: 'pusher',\n//     key: process.env.MIX_PUSHER_APP_KEY,\n//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n//     forceTLS: true\n// });\n","export default function visitAdjacent (x, y, width, height, fn) {\n  if (x - 1 >= 0) {\n    fn(x - 1, y)\n  }\n  if (y - 1 >= 0) {\n    fn(x, y - 1)\n  }\n  if (x - 1 >= 0 && y - 1 >= 0) {\n    fn(x - 1, y - 1)\n  }\n  if (x + 1 < width) {\n    fn(x + 1, y)\n  }\n  if (y + 1 < height) {\n    fn(x, y + 1)\n  }\n  if (x + 1 < width && y + 1 < height) {\n    fn(x + 1, y + 1)\n  }\n  if (x - 1 >= 0 && y + 1 < height) {\n    fn(x - 1, y + 1)\n  }\n  if (x + 1 < width && y - 1 >= 0) {\n    fn(x + 1, y - 1)\n  }\n}\n","import visitAdjacent from './visitAdjacent'\n\nexport default function createBoard (width, height, mines) {\n  validateBoard(width, height, mines)\n\n  let tooManyTries = 0\n  while (tooManyTries++ < 1000) {\n    try {\n      return doCreateBoard(width, height, mines)\n    } catch (error) {\n      if (!(error instanceof CellWithTooManyAdjacentException)) {\n        throw error\n      }\n    }\n  }\n\n  throw new Error('Giving up trying to create the board, there are too many mines.')\n}\n\nfunction doCreateBoard (width, height, mines) {\n  let placedMines = 0\n  const board = createEmptyBoard(width, height)\n\n  while (placedMines < mines) {\n    const xTarget = Math.floor(Math.random() * width)\n    const yTarget = Math.floor(Math.random() * height)\n\n    if (!isMine(board[xTarget][yTarget])) {\n      board[xTarget][yTarget] = mineValue()\n      placedMines++\n\n      visitAdjacent(xTarget, yTarget, width, height, (x, y) => {\n        if (!isMine(board[x][y])) {\n          board[x][y]++\n          if (board[x][y] > 6) {\n            throw new CellWithTooManyAdjacentException()\n          }\n        }\n      })\n    }\n  }\n  return board\n}\n\nfunction validateBoard (width, height, mines) {\n  if (width < 6 || height < 6) {\n    throw new Error('The side should be bigger than 5')\n  }\n  if (width * height > 512) {\n    throw new Error('The board is too big. It should be less than 512 cells')\n  }\n  if (width * height * 0.25 < mines) {\n    throw new Error('There are too many mines for this board.')\n  }\n  if (width * 0.25 > height || height * 0.25 > width) {\n    throw new Error('One side is too small compared to the other.')\n  }\n}\n\nfunction createEmptyBoard (width, height) {\n  const board = new Array(width)\n  for (let x = 0; x < width; x++) {\n    board[x] = new Array(height)\n    for (let y = 0; y < height; y++) {\n      board[x][y] = 0\n    }\n  }\n  return board\n}\n\nfunction isMine (value) {\n  return value === mineValue()\n}\n\nfunction mineValue () {\n  return -1\n}\n\nfunction CellWithTooManyAdjacentException () {}\n","import React, { useState } from 'react'\nimport createBoard from './createBoard'\nimport initBoard from './initBoard'\nimport visitAdjacent from './visitAdjacent'\n\nexport default function App () {\n  const width = 10\n  const height = 10\n  const [board, setBoard] = useState(() => initBoard(createBoard(width, height, 16)))\n\n  function uncover (x, y) {\n    setBoard(board => {\n      console.log({ cell: board[x][y], x, y })\n      board[x][y].state = 'uncovered'\n      if (board[x][y].value === 0) {\n        visitAdjacent(x, y, width, height, (x, y) => {\n          if (board[x][y].state !== 'uncovered') {\n            uncover(x, y)\n          }\n        })\n      }\n      return [...board]\n    })\n  }\n\n  return (\n    <>\n      <h1>Minesweeper</h1>\n      <h3><i>by: Enmy Perez</i></h3>\n      <table className='board'>\n        <tbody>\n          {board.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cell, columnIndex) => (\n                <td\n                  key={`${rowIndex},${columnIndex}`}\n                  className={`cell ${cell.state}`}\n                  onClick={() => uncover(rowIndex, columnIndex)}\n                >\n                  {cell.state === 'covered'\n                    ? ' '\n                    : (\n                        cell.value || ' '\n                      )}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  )\n}\n","export default function initBoard (boardValues) {\n  return boardValues.map(row => (\n    row.map(cell => ({\n      value: cell,\n      state: 'covered'\n    }))\n  ))\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nif (document.getElementById('root')) {\n  ReactDOM.render(<App />, document.getElementById('root'))\n}\n"],"sourceRoot":""}